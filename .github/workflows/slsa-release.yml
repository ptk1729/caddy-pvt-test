name: SLSA Release with Provenance

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GOTOOLCHAIN: local

permissions:
  contents: read
  id-token: write
  attestations: write
  packages: write

jobs:
  slsa-release:
    name: SLSA Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.25']
        include:
          - go: '1.25'
            GO_SEMVER: '~1.25.0'

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ matrix.GO_SEMVER }}
          check-latest: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # main

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # main

      - name: Install SLSA tools
        run: |
          go install github.com/slsa-framework/slsa-github-generator/slsa3@main

      - name: Set up environment variables
        id: vars
        run: |
          echo "version_tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "full_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Force fetch upstream tags
        run: git fetch --tags --force

      - name: Validate commits and tag signatures
        run: |
          # Import Matt Holt's key
          curl 'https://github.com/mholt.gpg' | gpg --import
          echo "Verifying the tag: ${{ steps.vars.outputs.version_tag }}"
          git verify-tag "${{ steps.vars.outputs.version_tag }}" || exit 1

      - name: Install xcaddy
        run: |
          go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
          xcaddy version

      - name: Run GoReleaser with SLSA provenance
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          version: latest
          args: release --clean --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.vars.outputs.version_tag }}
          COSIGN_EXPERIMENTAL: 1
          # Enable SLSA provenance generation
          SLSA_BUILDER_ID: "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@refs/heads/main"
          SLSA_BUILD_TYPE: "https://github.com/slsa-framework/slsa-github-generator/go@v1"

      - name: Generate additional SLSA provenance for artifacts
        run: |
          # Generate SLSA provenance for all built artifacts
          for artifact in dist/*; do
            if [ -f "$artifact" ]; then
              echo "Generating SLSA provenance for $artifact"
              
              # Generate provenance
              slsa3 provenance \
                --subjects "$artifact" \
                --builder-id "$SLSA_BUILDER_ID" \
                --build-type "$SLSA_BUILD_TYPE" \
                --output-file "${artifact}.intoto.jsonl"
              
              # Sign the provenance
              cosign attest-blob \
                --yes \
                --type slsaprovenance \
                --predicate "${artifact}.intoto.jsonl" \
                --bundle "${artifact}.intoto.bundle" \
                "$artifact"
              
              # Generate SBOM
              syft "$artifact" -o cyclonedx-json -o "${artifact}.sbom.json"
              
              # Sign the SBOM
              cosign attest-blob \
                --yes \
                --type https://cyclonedx.org/bom \
                --predicate "${artifact}.sbom.json" \
                --bundle "${artifact}.sbom.bundle" \
                "$artifact"
            fi
          done

      - name: Upload SLSA attestations
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: slsa-attestations-${{ runner.os }}-${{ steps.vars.outputs.short_sha }}
          path: |
            dist/*.intoto.bundle
            dist/*.sbom.bundle
            dist/*.intoto.jsonl
            dist/*.sbom.json
          retention-days: 90

      - name: Verify all attestations
        run: |
          echo "Verifying all generated attestations..."
          for bundle in dist/*.intoto.bundle; do
            if [ -f "$bundle" ]; then
              artifact=$(basename "$bundle" .intoto.bundle)
              echo "Verifying SLSA provenance for $artifact"
              cosign verify-blob-attestation \
                --bundle "$bundle" \
                --type slsaprovenance \
                "dist/$artifact"
            fi
          done
          
          for bundle in dist/*.sbom.bundle; do
            if [ -f "$bundle" ]; then
              artifact=$(basename "$bundle" .sbom.bundle)
              echo "Verifying SBOM for $artifact"
              cosign verify-blob-attestation \
                --bundle "$bundle" \
                --type https://cyclonedx.org/bom \
                "dist/$artifact"
            fi
          done

      - name: Generate release summary
        run: |
          echo "## SLSA Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.vars.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ steps.vars.outputs.full_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SLSA Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SLSA Level 3 Provenance Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ In-toto Attestations Created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOMs Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All Attestations Signed with Cosign" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All Attestations Verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Features" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Cryptographic signatures on all artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Build provenance tracking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Supply chain integrity verification" >> $GITHUB_STEP_SUMMARY
