name: SLSA Provenance

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  GOTOOLCHAIN: local

permissions:
  contents: read
  id-token: write
  attestations: write
  packages: write

jobs:
  slsa-provenance:
    name: Generate SLSA Provenance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.25']
        include:
          - go: '1.25'
            GO_SEMVER: '~1.25.0'

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ matrix.GO_SEMVER }}
          check-latest: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # main

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@da167eac915b4e86f08b264dbdbc867b61be6f0c # main

      - name: Install in-toto attestation tools
        run: |
          # Install in-toto attestation tools
          go install github.com/in-toto/attestation/cmd/in_toto_attestation@latest
          go install github.com/in-toto/attestation/cmd/in_toto_verify@latest
          
          # Install SLSA provenance generator
          go install github.com/slsa-framework/slsa-github-generator/slsa3@main

      - name: Set up environment variables
        id: vars
        run: |
          echo "version_tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "full_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Build Caddy with provenance
        working-directory: ./cmd/caddy
        env:
          CGO_ENABLED: 0
          SLSA_BUILDER_ID: "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@refs/heads/main"
          SLSA_BUILD_TYPE: "https://github.com/slsa-framework/slsa-github-generator/go@v1"
        run: |
          # Build the binary
          go build -trimpath -ldflags="-w -s -X main.version=${{ steps.vars.outputs.version_tag }}" -v -o caddy
          
          # Generate SLSA provenance using slsa-github-generator
          slsa3 provenance \
            --subjects caddy \
            --builder-id "$SLSA_BUILDER_ID" \
            --build-type "$SLSA_BUILD_TYPE" \
            --output-file caddy.intoto.jsonl

      - name: Generate SBOM
        run: |
          syft caddy -o cyclonedx-json -o caddy.sbom.json

      - name: Generate in-toto attestation
        run: |
          # Create in-toto attestation for the build
          cat > build_attestation.json << EOF
          {
            "_type": "https://in-toto.io/Statement/v0.1",
            "subject": [
              {
                "name": "caddy",
                "digest": {
                  "sha256": "$(sha256sum caddy | cut -d' ' -f1)"
                }
              }
            ],
            "predicateType": "https://slsa.dev/provenance/v1",
            "predicate": {
              "buildType": "https://github.com/slsa-framework/slsa-github-generator/go@v1",
              "builder": {
                "id": "https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@refs/heads/main"
              },
              "invocation": {
                "configSource": {
                  "uri": "git+https://github.com/${{ github.repository }}@${{ steps.vars.outputs.full_sha }}",
                  "digest": {
                    "sha1": "${{ steps.vars.outputs.full_sha }}"
                  }
                },
                "parameters": {
                  "GOOS": "${{ runner.os }}",
                  "GOARCH": "amd64",
                  "CGO_ENABLED": "0"
                }
              },
              "buildConfig": {
                "command": ["go", "build", "-trimpath", "-ldflags=-w -s", "-v", "-o", "caddy"],
                "env": [
                  "CGO_ENABLED=0",
                  "GOOS=${{ runner.os }}",
                  "GOARCH=amd64"
                ]
              },
              "metadata": {
                "buildInvocationId": "${{ github.run_id }}",
                "buildStartedOn": "${{ steps.vars.outputs.build_timestamp }}",
                "buildFinishedOn": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                "completeness": {
                  "parameters": true,
                  "environment": true,
                  "materials": true
                },
                "reproducible": false
              },
              "materials": [
                {
                  "uri": "git+https://github.com/${{ github.repository }}@${{ steps.vars.outputs.full_sha }}",
                  "digest": {
                    "sha1": "${{ steps.vars.outputs.full_sha }}"
                  }
                }
              ]
            }
          }
          EOF

      - name: Sign attestations with Cosign
        run: |
          # Sign the SLSA provenance
          cosign attest-blob \
            --yes \
            --type slsaprovenance \
            --predicate caddy.intoto.jsonl \
            --bundle caddy.intoto.bundle \
            caddy
          
          # Sign the SBOM
          cosign attest-blob \
            --yes \
            --type https://cyclonedx.org/bom \
            --predicate caddy.sbom.json \
            --bundle caddy.sbom.bundle \
            caddy
          
          # Sign the in-toto attestation
          cosign attest-blob \
            --yes \
            --type in-toto \
            --predicate build_attestation.json \
            --bundle build_attestation.bundle \
            caddy

      - name: Upload attestations
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: slsa-attestations-${{ runner.os }}-${{ steps.vars.outputs.short_sha }}
          path: |
            caddy.intoto.bundle
            caddy.sbom.bundle
            build_attestation.bundle
            caddy.intoto.jsonl
            caddy.sbom.json
            build_attestation.json
          retention-days: 30

      - name: Verify attestations
        run: |
          # Verify SLSA provenance
          cosign verify-blob-attestation \
            --bundle caddy.intoto.bundle \
            --type slsaprovenance \
            caddy
          
          # Verify SBOM
          cosign verify-blob-attestation \
            --bundle caddy.sbom.bundle \
            --type https://cyclonedx.org/bom \
            caddy
          
          # Verify in-toto attestation
          cosign verify-blob-attestation \
            --bundle build_attestation.bundle \
            --type in-toto \
            caddy

      - name: Generate attestation summary
        run: |
          echo "## SLSA Provenance Attestations Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.vars.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ steps.vars.outputs.full_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Attestations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SLSA Provenance (caddy.intoto.bundle)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM (caddy.sbom.bundle)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ In-toto Attestation (build_attestation.bundle)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification" >> $GITHUB_STEP_SUMMARY
          echo "All attestations have been signed with Cosign and verified successfully." >> $GITHUB_STEP_SUMMARY
